# Python f-Strings: A cleaner way to format strings

When working with strings in Python, you often want to include values from variables.  
There are several ways to do this. Let’s look at an example:

```python
name = "Alice"
age = 30

### 1. Concatenation
```python
print("My name is " + name + " and I am " + str(age) + " years old")
Note: You need str(age) because you can’t concatenate a string with an integer directly.

### 2. Percent Formatting (%)
```python
print("My name is %s and I am %d years old" % (name, age))
%s → string, %d → integer

### 3. str.format()
```python
print("My name is {} and I am {} years old".format(name, age))
With named placeholders:
print("My name is {n} and I am {a} years old".format(n=name, a=age))

### 4. f-Strings (Python 3.6+)
The cleanest and most readable option:
```python
print(f"My name is {name} and I am {age} years old")

So, what are the benefits?
1. Shorter, cleaner syntax
2. Directly embed expressions inside strings
3. More readable compared to older methods

**f-strings were introduced in Python 3.6, and are now the recommended way to format strings.**
